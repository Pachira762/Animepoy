/*=============================================================================
	PostProcessLineArt.usf: PostProcessing Line
=============================================================================*/

#include "/Engine/Private/Common.ush"
#include "/Engine/Private/Substrate/Substrate.ush"
#include "/Engine/Private/Substrate/SubstrateEvaluation.ush"
#include "/Engine/Private/DeferredShadingCommon.ush"
#include "/Engine/Private/PostProcessCommon.ush"
#include "/Engine/Private/ScreenPass.ush"
#include "/Engine/Private/SceneTextureParameters.ush"
#include "/Engine/Private/PositionReconstructionCommon.ush"

SCREEN_PASS_TEXTURE_VIEWPORT(Input)

Texture2D<uint> LineTexture;

float4 LineColor;
float MaterialThreshold;
float DepthThreshold;
float NormalThreshold;
float PlanarThreshold;
float NonLineSpecular;
int LineWidth;
int SearchRangeMin;
int SearchRangeMax;

float Min4(float A, float B, float C, float D)
{
    return min(min(A, B), min(C, D));
}

uint EncodeLine(float DeviceZ)
{
    return asuint(DeviceZ);
}

float DecodeLine(in uint Line)
{
    return asfloat(Line);
}

uint CalcLineDistance2(int2 Offset)
{
    int X = Offset.x < 0 ? 2 * Offset.x + 1 : 2 * Offset.x;
    int Y = Offset.y < 0 ? 2 * Offset.y + 1 : 2 * Offset.y;
    return X * X + Y * Y;
}

struct PixelData
{
    float   DeviceZ;
    float3  WorldPosition;
    float3  WorldNormal;
    float   Fresnel;

#if SUBSTRATE_ENABLED
    uint    State;
    float   Group;
#else
    float   Metallic;
    float   Specular;
    float   Roughness;
    uint    ShadingModel;
#endif // SUBSTRATE_ENABLED

    uint    Flags;
};

#define NOLINE_MASK 0x80
#define NOLINEGROUP_MASK 0x40

#define LINEFLAG_GET_NOLINE(Flags) Flags & NOLINE_MASK
#define LINEFLAG_GET_NOLINEGROUP(Flags) Flags & NOLINEGROUP_MASK

PixelData GetPixelData(int2 PixelPos)
{
    PixelData OutPixel = (PixelData)0;

    float3 CameraVector;
    OutPixel.DeviceZ = LookupDeviceZ(PixelPos);
    ReconstructTranslatedWorldPositionAndCameraDirectionFromDeviceZ(PixelPos, OutPixel.DeviceZ, OutPixel.WorldPosition, CameraVector);
    
#if SUBSTRATE_ENABLED    
	FSubstrateAddressing SubstrateAddressing = GetSubstratePixelDataByteOffset(PixelPos, uint2(View.BufferSizeAndInvSize.xy), Substrate.MaxBytesPerPixel);
	FSubstratePixelHeader SubstratePixelHeader = UnpackSubstrateHeaderIn(Substrate.MaterialTextureArray, SubstrateAddressing, Substrate.TopLayerTexture);
    FSubstrateBSDF BSDF = UnpackSubstrateBSDF(Substrate.MaterialTextureArray, SubstrateAddressing, SubstratePixelHeader);
    
    OutPixel.WorldNormal = SubstrateGetWorldNormal(SubstratePixelHeader, BSDF, SubstrateAddressing);
    OutPixel.Fresnel = 1.0 - abs(dot(OutPixel.WorldNormal, CameraVector));

    OutPixel.State = SubstratePixelHeader.State;

    OutPixel.Group = 0.0;
    OutPixel.Flags = 0;
    if(BSDF_GETTYPE(BSDF) == SUBSTRATE_BSDF_TYPE_TOON)
    {
        float2 ToonParams = TOON_PARAMS(BSDF).xy;
        OutPixel.Group = ToonParams.y;
        OutPixel.Flags = uint(255.0 * ToonParams.x);
    }
#else
    float4 GBufferB = SceneTexturesStruct.GBufferBTexture[PixelPos];
    uint ShadingModelID = DecodeShadingModelId(GBufferB.a);

    OutPixel.Metallic = GBufferB.r;
    OutPixel.Specular = GBufferB.g;
    OutPixel.Roughness = GBufferB.b;
    OutPixel.ShadingModel = ShadingModelID;
    
    bool bHasNormal = ShadingModelID != SHADINGMODELID_UNLIT;
    if (bHasNormal)
    {
        OutPixel.WorldNormal = DecodeNormal(SceneTexturesStruct.GBufferATexture[PixelPos].xyz);
        OutPixel.Fresnel = 1 - abs(dot(OutPixel.WorldNormal, CameraVector));
    }
    
    if (ShadingModelID == SHADINGMODELID_EYE)
    {
        OutPixel.Flags = 255.0 * GBufferB.r; // Metallic
    }
#endif // SUBSTRATE_ENABLED

    return OutPixel;
}

bool DetectLine(PixelData Pixel0, PixelData Pixel1, out bool bShiftLine)
{
    bool bNear = Pixel0.DeviceZ > Pixel1.DeviceZ;
    bShiftLine = !bNear;

    // Cancel line if near object has no line flag.
    bool bNoLine = LINEFLAG_GET_NOLINE(bNear ? Pixel0.Flags : Pixel1.Flags);
    bool bNoLineGroup = LINEFLAG_GET_NOLINEGROUP(Pixel0.Flags) & LINEFLAG_GET_NOLINEGROUP(Pixel1.Flags);
    if (bNoLine || bNoLineGroup)
    {
        return false;
    } 

#if SUBSTRATE_ENABLED
    if (Pixel0.State != Pixel1.State || Pixel0.Flags != Pixel1.Flags || Pixel0.Group != Pixel1.Group)
    {
        return true;
    }
#else
    if (Pixel0.ShadingModel != Pixel1.ShadingModel || Pixel0.Specular !=Pixel1.Specular)
    {
        return true;
    }

    // MaterialLine
    float DeltaMetallic = abs(Pixel0.Metallic - Pixel1.Metallic);
    float DeltaRoughness = abs(Pixel0.Roughness - Pixel1.Roughness);
    if (DeltaMetallic + DeltaRoughness > MaterialThreshold)
    {
        return true;
    }
#endif // SUBSTRATE_ENABLED

    // Depth Line
    float DepthFactor = lerp(1, 0.1f, bNear ? Pixel0.Fresnel : Pixel1.Fresnel);
    float DeltaZ = abs(Pixel0.DeviceZ - Pixel1.DeviceZ);
    if (DepthFactor * DeltaZ > DepthThreshold)
    {
        return true;
    }
    
    // Planar Line
    float3 V = normalize(Pixel0.WorldPosition - Pixel1.WorldPosition);
    float NoV = max(abs(dot(Pixel0.WorldNormal, V)), abs(dot(Pixel1.WorldNormal, V)));
    if (NoV > PlanarThreshold)
    {
        return true;
    }

    // Normal Line
    float DeltaNormal = dot(Pixel0.WorldNormal, Pixel1.WorldNormal);
    if (DeltaNormal < NormalThreshold)
    {
        bShiftLine = false;
        return true;
    }

    return false;
}

RWTexture2D<uint> OutLineTexture;

[numthreads(8, 8, 1)]
void DetectLineCS(int2 Id : SV_DispatchThreadID)
{
    static const int2 Offsets[2] =
    {
        int2(1, 0),
        int2(0, 1),
    };

    int2 PixelPos0 = Input_ViewportMin + Id;
    if (all(PixelPos0 < Input_ViewportMax))
    {
        PixelData Pixel0 = GetPixelData(PixelPos0);

        for (int i = 0; i < 2; ++i)
        {
            int2 PixelPos1 = PixelPos0 + Offsets[i];
            if (all(PixelPos1 < Input_ViewportMax))
            {
                PixelData Pixel1 = GetPixelData(PixelPos1);

                bool bShiftLine = false;
                if (DetectLine(Pixel0, Pixel1, bShiftLine))
                {
                    int2 LinePos = bShiftLine ? PixelPos1 : PixelPos0;
                    float DeviceZ = bShiftLine ? Pixel1.DeviceZ : Pixel0.DeviceZ;
                    InterlockedMax(OutLineTexture[LinePos], EncodeLine(DeviceZ));
                }
            }
        }
    }
}

float FindLine(int2 PixelPos, out float LineDepth)
{
    static int2 SearchOffsets[5] = { int2(0, 0), int2(0, -1), int2(-1, 0), int2(+1, 0), int2(0, +1) };
    
    LineDepth = 0.f;

    for (int y = SearchRangeMin; y <= SearchRangeMax; ++y)
    {
        for (int x = SearchRangeMin; x <= SearchRangeMax; ++x)
        {
            int2 Offset = int2(x, y);
            int2 LinePos = PixelPos + Offset;

            if (all(Input_ViewportMin <= LinePos) && all(LinePos < Input_ViewportMax))
            {
                float Depth = DecodeLine(LineTexture[LinePos]);
                uint Distance = CalcLineDistance2(Offset);

                if (Depth > LineDepth && Distance < LineWidth)
                {
                    LineDepth = Depth;
                }
            }
        }
    }

    return LineDepth;
}

void CompositeLinePS(float4 SvPosition : SV_POSITION, out float4 OutColor : SV_Target0, out float OutDepth : SV_Depth)
{
    int2 PixelPos = int2(SvPosition.xy);
    float Depth = FindLine(PixelPos, Depth);
    if (Depth == 0.0)
    {
        discard;
        return;
    }

    OutColor = float4(LineColor.a * LineColor.rgb, LineColor.a);
    OutDepth = Depth;
}

void ClearSceneColorAndGBufferPS(float4 SvPosition : SV_POSITION, out float4 OutSceneColor : SV_Target0)
{
    OutSceneColor = float4(1, 1, 1, 0);
}
