/*=============================================================================
	PostProcessDiffusion.usf: PostProcess Diffusion Filter
=============================================================================*/

#include "/Engine/Private/Common.ush"
#include "/Engine/Private/ScreenPass.ush"
#include "/Engine/Private/PostProcessCommon.ush"

SCREEN_PASS_TEXTURE_VIEWPORT(Input)
SCREEN_PASS_TEXTURE_VIEWPORT(PreTonemap)
SCREEN_PASS_TEXTURE_VIEWPORT(Output)

Texture2D<float4> SceneColorTexture;
Texture2D<float4> PreTonemapColorTexture;
Texture2D<float4> BlurredColorTexture;

//
// Generate Mask
//

float LuminanceMin;
float InvLuminanceWidth;
RWTexture2D<float4> OutMaskTexture;

float3 SampleSceneColor(int2 PixelPos)
{
    int2 SrcPos = DOWNSAMPLE_FACTOR * PixelPos + Input_ViewportMin;
    float3 Color = (float3) 0;

    UNROLL
    for(int y = 0; y < DOWNSAMPLE_FACTOR; ++y)
    {
        UNROLL
        for(int x = 0; x < DOWNSAMPLE_FACTOR; ++x) 
        {
            Color += SceneColorTexture[SrcPos + int2(x, y)].rgb;
        }
    }

    return Color / (DOWNSAMPLE_FACTOR * DOWNSAMPLE_FACTOR);
}

float3 SamplePreTonemapColor(int2 PixelPos)
{
    int2 SrcPos = PreTonemap_ViewportSize * (PixelPos * Output_ExtentInverse) + PreTonemap_ViewportMin;
    float3 Color = (float3) 0;

    UNROLL
    for(int y = 0; y < DOWNSAMPLE_FACTOR; ++y)
    {
        UNROLL
        for(int x = 0; x < DOWNSAMPLE_FACTOR; ++x) 
        {
            Color += PreTonemapColorTexture[SrcPos + int2(x, y)].rgb;
        }
    }

    return Color / (DOWNSAMPLE_FACTOR * DOWNSAMPLE_FACTOR);
}

[numthreads(8,8,1)]
void GenerateMaskCS(uint2 Id: SV_DispatchThreadID)
{
    int2 PixelPos = Id;

    if (all(PixelPos < Output_Extent))
    {
        float3 SceneColor = SampleSceneColor(PixelPos);

#if USE_PRE_TONEMAP_LUMINANCE
    float3 PreTonemapColor = SamplePreTonemapColor(PixelPos);
    float Alpha = saturate((Luminance(PreTonemapColor) - LuminanceMin) * InvLuminanceWidth);
#else
    float Alpha = saturate((Luminance(SceneColor) - LuminanceMin) * InvLuminanceWidth);
#endif

        OutMaskTexture[PixelPos] = float4(SceneColor, Alpha);
    }
}

//
// Composite
//

float3 BlendLighten(float3 Base, float3 Blend)
{
    return max(Base, Blend);
}

float3 BlendScreen(float3 Base, float3 Blend)
{
    return float3(
        1.0 - (1.0 - Base.r) * (1.0 - Blend.r),
        1.0 - (1.0 - Base.g) * (1.0 - Blend.g),
        1.0 - (1.0 - Base.b) * (1.0 - Blend.b)
    );
}

float3 BlendOverlay(float3 Base, float3 Blend)
{
    return float3(
        Base.r < 0.5 ? (2.0 * Base.r * Blend.r) : (1.0 - 2.0 * (1.0 - Base.r) * (1.0 - Blend.r)),
        Base.g < 0.5 ? (2.0 * Base.g * Blend.g) : (1.0 - 2.0 * (1.0 - Base.g) * (1.0 - Blend.g)),
        Base.b < 0.5 ? (2.0 * Base.b * Blend.b) : (1.0 - 2.0 * (1.0 - Base.b) * (1.0 - Blend.b))
    );
}

float3 BlendSoftLight(float3 Base, float3 Blend)
{
    return float3(
        (1.0 - 2.0 * Blend.r) * Base.r * Base.r + 2.0 * Blend.r * Base.r,
        (1.0 - 2.0 * Blend.g) * Base.g * Base.g + 2.0 * Blend.g * Base.g,
        (1.0 - 2.0 * Blend.b) * Base.b * Base.b + 2.0 * Blend.b * Base.b
    );
}

#define DIFFUSION_BLEND_MODE_LIGHTEN 0
#define DIFFUSION_BLEND_MODE_SCREEN 1
#define DIFFUSION_BLEND_MODE_OVERLAY 2
#define DIFFUSION_BLEND_MODE_SOFTLIGHT 3
#define DIFFUSION_BLEND_MODE_DEBUG 4

float BlendAmount;

void CompositePS(float4 SvPosition : SV_POSITION, out float4 OutColor : SV_Target0)
{
    const float2 ViewportUV = (SvPosition.xy - Output_ViewportMin) * Output_ViewportSizeInverse;

    float4 SceneColor = SceneColorTexture[Input_ViewportSize * ViewportUV + Input_ViewportMin];
    float4 BlurredColor = Texture2DSampleLevel(BlurredColorTexture, GlobalBilinearClampedSampler, ViewportUV, 0);

    float3 BlendedColor;
       
#if DIFFUSION_BLEND_MODE == DIFFUSION_BLEND_MODE_LIGHTEN
    BlendedColor = BlendLighten(SceneColor.rgb, BlurredColor.rgb);

#elif DIFFUSION_BLEND_MODE == DIFFUSION_BLEND_MODE_SCREEN
    BlendedColor = BlendScreen(SceneColor.rgb, BlurredColor.rgb);

#elif DIFFUSION_BLEND_MODE == DIFFUSION_BLEND_MODE_OVERLAY
    BlendedColor = BlendOverlay(SceneColor.rgb, BlurredColor.rgb);

#elif DIFFUSION_BLEND_MODE == DIFFUSION_BLEND_MODE_SOFTLIGHT
    BlendedColor = BlendSoftLight(SceneColor.rgb, BlurredColor.rgb);

#elif DIFFUSION_BLEND_MODE == DIFFUSION_BLEND_MODE_DEBUG
    BlendedColor = BlurredColor.rgb * BlurredColor.a;
    BlurredColor.a = 1.f;
#endif

    float Alpha = BlendAmount * BlurredColor.a;
    OutColor = float4(lerp(SceneColor.rgb, BlendedColor.rgb, Alpha), 0);
}
